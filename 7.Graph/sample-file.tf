resource "aws_eip" "lb" {
  domain   = "vpc"
}

resource "aws_security_group" "example" {
  name        = "attribute-sg"
}

resource "aws_vpc_security_group_ingress_rule" "example-1" {
  security_group_id = aws_security_group.example.id

  cidr_ipv4   = "${aws_eip.lb.public_ip}/32"
  from_port   = 443
  ip_protocol = "tcp"
  to_port     = 443
}

resource "aws_instance" "web" {
  ami           = "ami-0440d3b780d96b29d"
  instance_type = "t2.micro"
}

/*
digraph G {
  rankdir = "RL";
  node [shape = rect, fontname = "sans-serif"];
  "aws_eip.lb" [label="aws_eip.lb"];
  "aws_instance.web" [label="aws_instance.web"];
  "aws_security_group.example" [label="aws_security_group.example"];
  "aws_vpc_security_group_ingress_rule.example-1" [label="aws_vpc_security_group_ingress_rule.example-1"];
  "aws_vpc_security_group_ingress_rule.example-1" -> "aws_eip.lb";
  "aws_vpc_security_group_ingress_rule.example-1" -> "aws_security_group.example";
}

This is a dot language generated by terraform. 
In Terraform, the graph command generates a visual representation of your infrastructure resources and their dependencies. 
The output is in DOT format, which is a plain-text graph description language used by tools like Graphviz to render visual diagrams.


terraform graph > graph.dot
Produces the output in dot language and saves it to graph.dot
Then: dot -Tpng graph.dot -o graph.png
This creates a PNG file showing the resource dependencies.

Nodes represent Terraform resources, modules, or data sources.

Edges (arrows) show dependencies between resources.

*/











 





